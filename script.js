/**
 * script.js
 * Control de Inventario Tienda Musical
 *
 * Flujo general:
 * 1. obtenerProductos() ‚Äî GET /productos
 * 2. renderCatalogo(), renderUltimos(), renderEditar() ‚Äî muestran datos
 * 3. guardarProducto() ‚Äî POST o PUT seg√∫n creaci√≥n o edici√≥n
 * 4. eliminarProducto() ‚Äî DELETE /productos/:id
 * 5. modificarCantidad() ‚Äî ajuste de cantidad y PUT
 * 6. mostrar alertas de √©xito o error
 * 7. Exposici√≥n de funciones globales y renderizado inicial
 */

// Prefijos seg√∫n categor√≠a para los IDs
const PREFIX = {
    "Instrumentos de Viento": "IV",
    "Instrumentos de Percusi√≥n": "IP",
    "Instrumentos de Cuerda": "IC",
    "Instrumentos El√©ctricos": "IE"
};

const API_URL = "http://localhost:3000/productos";

// Referencia a elementos del DOM
const form = document.getElementById("inventory-form");
const selectCat = document.getElementById("categoria");
const inputId = document.getElementById("idProducto");
const alertSucc = document.getElementById("alert-success");
const productList = document.getElementById("product-list");
const totalPriceP = document.getElementById("total-price");
const ultimosList = document.getElementById("lista-ultimos");
const filtroCatalogo = document.getElementById("filtro-catalogo");
const filtroEditar = document.getElementById("filtro-editar");
const filtroCategoriaEdit = document.getElementById("filtro-categoria-editar");
const editarLista = document.getElementById("editar-lista");

// Validaci√≥n de campo precio: se asegura que el usuario solo pueda ingresar n√∫meros enteros (sin puntos, comas ni letras)
const inputPrecio = document.getElementById("precio");
if (inputPrecio) {
    inputPrecio.addEventListener("input", () => {
        // Reemplaza todo lo que no sea un n√∫mero entero
        inputPrecio.value = inputPrecio.value.replace(/[^\d]/g, "");
    });
}

/**
 * Funci√≥n utilitaria que detecta la p√°gina actual
 * y renderiza solo lo necesario seg√∫n sea:
 * - index.html ‚Üí muestra √∫ltimos productos
 * - cat√°logo.html ‚Üí muestra el cat√°logo completo
 * - actualizar.html ‚Üí muestra lista editable
 */
function renderizarSoloLoNecesario() {
    const pagina = window.location.pathname;
    if (pagina.includes("index")) {
        renderUltimos();
    } else if (pagina.includes("cat√°logo")) {
        renderCatalogo();
    } else if (pagina.includes("actualizar")) {
        renderEditar();
    }
}

// Se obtienen todos los productos del servidor con una petici√≥n GET
async function obtenerProductos() {
    try {
        const res = await fetch(API_URL);
        const data = await res.json();

        // Mostrar en consola los productos solo para fines de desarrollo
        console.log("üì¶ Productos actuales (carga inicial):", data);

        return data;
    } catch (error) {
        console.error("üö® Error al obtener productos:", error);
        return []; // Retorna un arreglo vac√≠o si hay error para evitar que la app se rompa
    }
}


// Se env√≠a los datos al servidor con POST para crear o PUT para actualizar
async function guardarProducto(producto, editKey = null) {
    const options = {
        method: editKey ? "PUT" : "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(producto)
    };
    const url = editKey ? `${API_URL}/${editKey}` : API_URL;
    await fetch(url, options);
    console.log(editKey ? "‚úèÔ∏è Producto actualizado:" : "üÜï Producto agregado:", producto);
}


// Se elimina un producto mediante DELETE y vuelve a renderizar lo necesario
async function eliminarProducto(id) {
    await fetch(`${API_URL}/${id}`, { method: "DELETE" });
    console.log("üóëÔ∏è Producto eliminado con ID:", id);
    renderEditar;
}

/**
 * Se modifica la cantidad de un producto espec√≠fico (sumando o restando) 
 * sin volver a renderizar toda la lista.
 * 
 * Actualiza solo el <li> correspondiente del DOM para evitar recargas visuales innecesarias
 * y aplica una animaci√≥n suave con la clase 'cantidad-actualizada' para mejorar la experiencia del usuario.
 * 
 * Adem√°s, recalcula y actualiza el total del inventario sin reconstruir la lista completa.
 * 
 * Ventajas:
 * - Mejora el rendimiento (no se vuelve a renderizar toda la lista).
 * - Elimina el efecto de "doble brinco" o parpadeo.
 * - Agrega una experiencia visual m√°s fluida y profesional.
 */

async function modificarCantidad(id, delta) {
    const productos = await obtenerProductos();
    const p = productos.find(item => item.id === id);
    if (!p) return;
    p.cantidad = Math.max(0, p.cantidad + delta);
    console.log(`üîÑ Cantidad actualizada para ${id}: ${p.cantidad} (${delta > 0 ? "+1" : "-1"})`);
    await guardarProducto(p, p.id);

    // Encuentra el <li> correspondiente
    const liList = editarLista.querySelectorAll("li");
    liList.forEach(li => {
        if (li.innerHTML.includes(p.id)) {
            li.innerHTML = `
                <strong>${p.nombre}</strong> (${p.id}) - ${p.categoria}<br>
                Cantidad: ${p.cantidad} | Precio: $${p.precio.toLocaleString()}<br>
                <button onclick="modificarCantidad('${p.id}', 1)">+1</button>
                <button onclick="modificarCantidad('${p.id}', -1)">-1</button>
                <button onclick="editarProductoDesdeOtraPagina('${p.id}')">Editar</button>
                <button onclick="eliminarProducto('${p.id}')">Eliminar</button>
            `;
            li.classList.add("cantidad-actualizada");
            setTimeout(() => li.classList.remove("cantidad-actualizada"), 500);
        }
    });

    // Recalcular solo el total general
    const total = productos.reduce((sum, p) => sum + (p.precio * p.cantidad), 0);
    const totalInventario = document.getElementById("total-inventario");
    if (totalInventario) {
        totalInventario.textContent = `Total del Inventario: $${total.toLocaleString()}`;
        console.log("üìä Total actualizado del inventario:", total);
    }
}


/**
 * Se Genera el siguiente ID para una categor√≠a dada.
 * Busca todos los IDs existentes que empiecen por el prefijo,
 * extrae el n√∫mero, halla el m√°ximo y suma 1.
 * Ejemplo: con IV001 e IV002 devuelve IV003.
 */
async function generarID(categoria) {
    const pref = PREFIX[categoria] || "";
    const productos = await obtenerProductos();
    const usados = productos
        .filter(item => item.id.startsWith(pref))
        .map(item => parseInt(item.id.slice(pref.length), 10));
    const siguiente = (usados.length ? Math.max(...usados) : 0) + 1;
    return `${pref}${String(siguiente).padStart(3, "0")}`;
}

// Se muestra una alerta breve de √©xito
function showSuccess() {
    if (!alertSucc) return;
    alertSucc.style.display = "block";
    setTimeout(() => {
        alertSucc.style.display = "none";
    }, 2000);
}

// Se renderiza los √∫ltimos siete productos en orden inverso
async function renderUltimos() {
    if (!ultimosList) return;
    const productos = await obtenerProductos();
    ultimosList.innerHTML = "";
    const ultimos = productos.slice(-7).reverse();
    ultimos.forEach(p => {
        const li = document.createElement("li");
        li.textContent = `${p.id} - ${p.nombre} (${p.categoria}) - $${p.precio.toLocaleString()} x${p.cantidad} - ${p.fecha} - ${p.estado}`;
        li.classList.add("fade-in");
        ultimosList.appendChild(li);
    });
}

// Se renderiza el cat√°logo completo y aplica el filtro de categor√≠a
async function renderCatalogo() {
    if (!productList || !totalPriceP) return;
    const productos = await obtenerProductos();
    productList.innerHTML = "";
    let total = 0;
    const filtro = filtroCatalogo?.value || "";

    productos.forEach(p => {
        if (filtro && p.categoria !== filtro) return;
        total += p.precio * p.cantidad;
        const card = document.createElement("div");
        card.className = "product-card fade-in-smooth";
        card.innerHTML = `
      <div class="product-card-inner">
        <div class="product-card-front">
          <img src="${p.imagen}" alt="${p.nombre}" class="thumb">
          <strong>${p.nombre}</strong>
        </div>
        <div class="product-card-back">
          <p>${p.id}</p>
          <p>${p.categoria}</p>
          <p>$${p.precio.toLocaleString()} x${p.cantidad}</p>
          <p>${p.fecha}</p>
          <p>${p.estado}</p>
        </div>
      </div>
    `;
        productList.appendChild(card);
    });

    totalPriceP.textContent = `Total: $${total.toLocaleString()}`;
}

// Se renderiza la lista de edici√≥n con filtros y acciones
async function renderEditar() {
    if (!editarLista) return;
    const productos = await obtenerProductos();
    editarLista.innerHTML = "";
    const textFilter = filtroEditar?.value.toLowerCase() || "";
    const catFilter = filtroCategoriaEdit?.value || "";
    let total = 0;

    productos.forEach(p => {
        const matchText = !textFilter || p.id.toLowerCase().includes(textFilter) || p.nombre.toLowerCase().includes(textFilter);
        const matchCat = !catFilter || p.categoria === catFilter;
        if (matchText && matchCat) {
            total += p.precio * p.cantidad;
            const li = document.createElement("li");
            li.innerHTML = `
        <strong>${p.nombre}</strong> (${p.id}) - ${p.categoria}<br>
        Cantidad: ${p.cantidad} | Precio: $${p.precio.toLocaleString()}<br>
        <button onclick="modificarCantidad('${p.id}', 1)">+1</button>
        <button onclick="modificarCantidad('${p.id}', -1)">-1</button>
        <button onclick="editarProductoDesdeOtraPagina('${p.id}')">Editar</button>
        <button onclick="eliminarProducto('${p.id}')">Eliminar</button>
      `;
            editarLista.appendChild(li);
        }
    });

    const totalInventario = document.getElementById("total-inventario");
    if (totalInventario) {
        totalInventario.textContent = `Total del Inventario: $${total.toLocaleString()}`;
    }
}

// Se Asigna el evento para autogenerar ID al cambiar categor√≠a
if (selectCat && inputId) {
    selectCat.addEventListener("change", async () => {
        inputId.value = await generarID(selectCat.value);
    });
}

/* Manejo del evento de env√≠o del formulario principal.
Si el formulario est√° en modo edici√≥n, actualiza el producto existente.
Si no, crea uno nuevo. Valida todos los campos antes de enviarlo.
Al finalizar, actualiza toda la interfaz para reflejar los cambios.*/

if (form) {
    form.addEventListener("submit", async e => {
        e.preventDefault();
        const nombre = form.querySelector("#nombre").value.trim();
        const categoria = selectCat.value;
        let id = inputId.value;
        const precio = parseFloat(form.querySelector("#precio").value);
        const cantidad = parseInt(form.querySelector("#cantidad").value, 10);
        const fecha = form.querySelector("#fecha").value;
        const estado = form.querySelector('input[name="estado"]:checked').value;
        const descripcion = form.querySelector("#descripcion").value.trim();
        const imagen = form.querySelector("#imagenURL").value.trim();

        if (!id && categoria) {
            id = await generarID(categoria);
            inputId.value = id;
        }

        if (!nombre || !categoria || !id || !(precio > 0) || !(cantidad >= 0) || !fecha || !imagen) {
            alert("Por favor completa todos los campos correctamente.");
            return;
        }

        const producto = { id, nombre, categoria, precio, cantidad, fecha, estado, descripcion, imagen };
        const editKey = form.dataset.editKey;

        if (editKey) {
            // Actualiza el producto existente
            await guardarProducto(producto, editKey);
        } else {
            // Crea un nuevo producto
            await guardarProducto(producto);
        }

        showSuccess();
        form.reset();
        inputId.value = "";
        selectCat.value = "";
        delete form.dataset.editKey;
        form.classList.remove("modo-edicion");
        document.getElementById("btn-add").textContent = "Agregar";

        // Render seg√∫n la p√°gina
        renderizarSoloLoNecesario()

    });
}

// Se guarda en localStorage la clave de edici√≥n y redirige
function editarProductoDesdeOtraPagina(id) {
    localStorage.setItem("productoParaEditar", id);
    console.log("‚û°Ô∏è Producto enviado a formulario para edici√≥n:", id);
    window.location.href = "index.html";
}

// Se carga los datos en el formulario si proviene de editar
window.addEventListener("DOMContentLoaded", async () => {
    const id = localStorage.getItem("productoParaEditar");
    if (form && id) {
        const productos = await obtenerProductos();
        const p = productos.find(item => item.id === id);
        if (p) {
            form.querySelector("#idProducto").value = p.id;
            form.querySelector("#nombre").value = p.nombre;
            form.querySelector("#categoria").value = p.categoria;
            form.querySelector("#precio").value = p.precio;
            form.querySelector("#cantidad").value = p.cantidad;
            form.querySelector("#fecha").value = p.fecha;
            form.querySelector(`input[name="estado"][value="${p.estado}"]`).checked = true;
            form.querySelector("#descripcion").value = p.descripcion;
            form.querySelector("#imagenURL").value = p.imagen;
            form.dataset.editKey = p.id;
            form.classList.add("modo-edicion");
            document.getElementById("btn-add").textContent = "Actualizar";
        }
        localStorage.removeItem("productoParaEditar");
    }
    renderizarTodo();
});

// Se asigna los filtros para cat√°logo y edici√≥n
if (filtroCatalogo) filtroCatalogo.addEventListener("change", renderCatalogo);
if (filtroEditar) filtroEditar.addEventListener("input", renderEditar);
if (filtroCategoriaEdit) filtroCategoriaEdit.addEventListener("change", renderEditar);


/*Inicializaci√≥n de la app:
 *  - Expone funciones globales para botones onclick
 *  - Lanza renderizado inicial*/

window.modificarCantidad = modificarCantidad;
window.eliminarProducto = eliminarProducto;
window.editarProductoDesdeOtraPagina = editarProductoDesdeOtraPagina;

function renderizarTodo() {
    renderUltimos();
    renderCatalogo();
    renderEditar();
}

/*
üîé DEBUG / DESARROLLO
-----------------------
Esto permite ver en consola todos los productos del servidor
cuando se carga el proyecto. √ösalo solo durante pruebas.

Descomenta para usar:
----------------------
*/
// fetch("http://localhost:3000/productos")
//     .then(res => res.json())
//     .then(data => console.log("Productos actuales (carga inicial):", data));
